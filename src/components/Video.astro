---
const videoTitle = "Conoce nuestro ";
const textoHighlight = "modelo para capacitar con IA adaptativa";
const videoTitle2 = " que las empresas más avanzadas ya están usando para medir, personalizar y optimizar el desempeño en tiempo real.";
const fullText = `${videoTitle}${textoHighlight}${videoTitle2}`;
// Precompute index boundaries so we can render numbers into the client script safely
const P1_END = videoTitle.length;
const P2_END = P1_END + textoHighlight.length;
const P3_END = P2_END + videoTitle2.length;
---

<section class="py-16 md:py-16 px-6 md:px-12 bg-white dark:bg-gray-900 transition-colors duration-300">
  <div class="container mx-auto text-center">
    <h2 class="mx-auto max-w-4xl text-2 md:text-3xl font-bold mb-10 text-gray-900 dark:text-gray-100 leading-snug">
      <!-- Texto real para lectores de pantalla (no animado) -->
      <span class="sr-only">{fullText}</span>

  <!-- Contenedor visible con animación. Pasamos datos necesarios al script con data-attributes -->
  <span id="typed-title" class="relative inline-block align-top" aria-hidden="true"
    data-full={fullText}
    data-p1-end={P1_END}
    data-p2-end={P2_END}
    data-p3-end={P3_END}
  ></span>
    </h2>
  </div>
</section>

<style>
  /* Caret del “typewriter” */
  #typed-title::after {
    content: "";
    display: inline-block;
    width: 2px;
    height: 1em;
    margin-left: 2px;
    vertical-align: -0.2em;
    background: currentColor;
    animation: caret-blink 1s steps(1, end) infinite;
  }
  .done-typing::after { display: none; }

  @keyframes caret-blink {
    50% { opacity: 0; }
  }

  /* Flotado sutil del highlight (solo si el usuario no reduce animación) */
  @media (prefers-reduced-motion: no-preference) {
    .float-soft {
      animation: float-soft 6s ease-in-out infinite;
      will-change: transform;
    }
    @keyframes float-soft {
      0%   { transform: translateY(0); }
      50%  { transform: translateY(-6px); }
      100% { transform: translateY(0); }
    }
  }
</style>

<script>
  (function () {
    const el = document.getElementById('typed-title');
    if (!el) return;

    const full = String(el.dataset.full || '');
    const P1_END = parseInt(el.dataset.p1End || '0', 10);
    const P2_END = parseInt(el.dataset.p2End || '0', 10);
    const P3_END = parseInt(el.dataset.p3End || String(full.length), 10);
    const highlightClass = 'bg-clip-text text-transparent bg-gradient-to-r from-cm-500 to-teal-500 float-soft';

    const prefersReduced = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    // Helper to render full text with highlighted middle part
    function renderFull() {
      el.innerHTML = [
        full.slice(0, P1_END),
        `<span class="${highlightClass}">` + full.slice(P1_END, P2_END) + '</span>',
        full.slice(P2_END, P3_END)
      ].join('');
    }

    if (prefersReduced) {
      renderFull();
      // small visual fade-in for non-motion-averse users only (we still respect reduced motion by skipping animations)
      el.style.opacity = '0';
      requestAnimationFrame(() => {
        el.style.transition = 'opacity 180ms ease';
        el.style.opacity = '1';
      });
      return;
    }

    // Typing effect
    const SPEED = 22; // ms per character
    let i = 0;

    function buildHTML(count) {
      const a = Math.min(count, P1_END);
      const b = Math.max(0, Math.min(count - P1_END, P2_END - P1_END));
      const c = Math.max(0, Math.min(count - P2_END, P3_END - P2_END));

      const s1 = full.slice(0, a);
      const s2 = full.slice(P1_END, P1_END + b);
      const s3 = full.slice(P2_END, P2_END + c);

      const part2Wrapped = b > 0 ? `<span class="${highlightClass}">${s2}</span>` : (count > P1_END ? `<span class="${highlightClass}"></span>` : '');
      return s1 + part2Wrapped + s3;
    }

    function frame() {
      i++;
      el.innerHTML = buildHTML(i);
      if (i < full.length) {
        setTimeout(frame, SPEED);
      } else {
        el.classList.add('done-typing');
      }
    }

    requestAnimationFrame(frame);
  })();
</script>
